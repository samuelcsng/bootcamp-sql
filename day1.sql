use sys;

CREATE DATABASE BOOTCAMP_2408;
use BOOTCAMP_2408;

-- Comments in SQL (double-dash)
-- Database -> tables
	-- One database may have many tables
    -- One table (similar to excel worksheet) may have rows
    -- One row contains one or more columns
    
-- Database: column defintions: VATCHAR(Similar to Java String), INT/ INTEGER(Java: int)
-- DECIMAL(13,2) 11 digits for integer, 2 digits for decimal places
-- boolean (true/ false): database normally we use VARCHAR(1) -> Y/N
CREATE TABLE STAFFS (
	ID INTEGER, -- 1,2,3,4 ...
    STAFF_NAME VARCHAR(20),
    GENDER VARCHAR(1),
    SALARY DECIMAL(11,2),
    STAFF_EMAIL VARCHAR(50),
    DEPT_CODE VARCHAR(2) -- IT, HR, MK ...
);

-- DROP TABLE STAFFS;

SELECT * FROM STAFFS;

-- INSERT DATA
-- SYNTAX: INSERT INTO "TABLE_NAME" VALUES ...
-- Column name sequence has to be same as the value sequence 
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (1, 'JOHN WONG', 'M', 20000.5, 'johnwong@gmail.com', 'IT');

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (2, 'PETER LAU', 'M', 31000.0, 'peterwong@hotmail.com', 'HR');

-- remove data
-- DELETE FROM STAFFS; -- REMOVE ALL DATA

-- table may contain null value
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (3, 'JENNY LAU', 'F', 25000.0, 'MK');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE, STAFF_EMAIL) 
	VALUES (2, 'PETER LAU', 'M', 31000.0, 'HR', NULL);
    
-- SELECT BY CONDITION (WHERE)
SELECT * FROM STAFFS WHERE GENDER = 'M';
-- WHERE DEPT_CODE = 'IT'
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT';
-- AND, OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' OR DEPT_CODE = 'MK';
SELECT * FROM STAFFS WHERE DEPT_CODE IN ('IT', 'MK'); -- OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND DEPT_CODE = 'MK'; -- NO RESULT
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND GENDER = 'M';
-- SUPPORT BRACKETS
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' OR DEPT_CODE = 'MK' AND GENDER = 'F'; -- AND GO FIRST, THEN OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND (SALARY > 19000 OR GENDER = 'F'); -- OR GO FIRST, THEN AND
-- SELECT SPECIFIC COLUMNS
-- SYNTAX: select "column_name1", "column_name2" ... from "table_name"
-- SELECT (WHAT YOU WANT TO SEE IN THE RESULT SET) -> COLUMNS
-- WHERE (HOW TO RETRIEVE THE DATA) -> ROWS
SELECT STAFF_NAME, DEPT_CODE FROM STAFFS WHERE GENDER = 'M';

-- CHANGE COLUMN NAME IN RESULT SET (NOT THE PHYSICAL TABLE)
SELECT STAFF_NAME AS NAME, DEPT_CODE AS DEPARTMENT_CODE FROM STAFFS WHERE GENDER = 'M';

-- ADD COLUMN IN PHYSICAL TABLE
ALTER TABLE STAFFS ADD EMPLOYMENT_DATE DATE;

-- AFTER ADDING COLUMN, THE COLUMN VALUES BECOME NULL FOR ALL ROWS
SELECT * FROM STAFFS;

-- UPDATE FIELD VALUES
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2014-08-01', '%Y-%m-%d') WHERE ID = 1;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2018-09-05', '%Y-%m-%d') WHERE ID = 2;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2019-03-31', '%Y-%m-%d') WHERE ID = 3;

-- CALCULATE PROBATION END DATE
-- DEFINE TABLE ALIAS
SELECT DATE_ADD(S.EMPLOYMENT_DATE, INTERVAL 3 MONTH) AS PROBATION_END_DATE
, S.STAFF_NAME
, S.ID
, S.EMPLOYMENT_DATE 
, S.EMPLOYMENT_DATE + 33 -- DATE -> INT + OPERATION (MYSQL NOT WORKING)
FROM STAFFS S;

-- MYSQL (NOT WORKING)
SELECT S.STAFF_NAME + '!!!!', CONCAT(S.STAFF_NAME, '!!!!')
FROM STAFFS S;

-- SELECT DETERMINE WHAT COLUMNS
SELECT S.STAFF_NAME + '!!!!'
, CONCAT(S.STAFF_NAME, '!!!!', '?????')
, CONCAT_WS(' ', S.STAFF_NAME, S.GENDER)
FROM STAFFS S
WHERE S.DEPT_CODE = 'IT'; -- DETERMINE THE NUMBER OF ROWS

-- MATH OPERATIONS (+, -, *, /, %)
-- 15 FIELDS (3 ROWS x 5 COLUMNS)
SELECT SALARY + 10000, SALARY, 12000 - 200 * 1.1, 1, 'HELLO'
FROM STAFFS;

SELECT 10 % 3, 'HELLO' FROM STAFFS WHERE DEPT_CODE IN ('MK', 'HR');

-- BETWEEN AND
SELECT *
FROM STAFFS
WHERE EMPLOYMENT_DATE BETWEEN STR_TO_DATE('2014-01-01', '%Y-%m-%d') AND STR_TO_DATE('2014-12-31', '%Y-%m-%d');

-- MODIFY PHYSICAL COLUMN DEFINTION
-- FROM VARCHAR(20) TO VARCHAR(30) -> EXTEND COLUMN LENGTH
ALTER TABLE STAFFS MODIFY STAFF_NAME VARCHAR(30);

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (4, 'VINCENT ABCDEFGHIJK ABCDEF', 'M', 15000.0, 'IT');
    
-- FROM VARCHAR(30) TO VARCHAR(20) -- NARROWING (DATA CHECKING)
-- IF EXISTING DATA LENGTH > NEW COLUMN LENGTH, DBMS WILL REJECT
ALTER TABLE STAFFS MODIFY STAFF_NAME VARCHAR(20);

UPDATE STAFFS SET STAFF_EMAIL = 'vincentlau@hotmail.com' WHERE ID = 4;

-- LIKE
-- "%" MEANS ANY CHARACTERS
SELECT *
FROM STAFFS
WHERE DEPT_CODE = 'IT'
AND STAFF_EMAIL LIKE '%@gmail.com';


INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (5, 'JOHN LAU', 'M', 20500.0, 'MK');

SELECT *
FROM STAFFS
WHERE STAFF_NAME LIKE 'JOHN%';

SELECT *
FROM STAFFS
WHERE STAFF_EMAIL LIKE '%@%' OR STAFF_EMAIL IS NULL;

-- AGGREGATION FUNCTIONS + WHERE
SELECT SUM(SALARY)
FROM STAFFS;

SELECT SUM(SALARY)
FROM STAFFS
WHERE DEPT_CODE = 'IT';

-- SUM() -> SUM UP ALL THE VALUE OF A COLUMN
-- COUNT() -> COUNT THE NUMBER OF ROWS
-- YOU CANNOT PUT STAFF_NAME HERE, YOU SHOULD KNOW THE REASON
-- AS LONG AS YOU HAVE ONE AGGREGATION FUNCTION, THE RESULT MUST BE SINGLE ROW
SELECT SUM(SALARY), COUNT(1), COUNT(*), COUNT(ID), MIN(SALARY), MAX(SALARY), MAX(ID), AVG(SALARY) -- , STAFF_NAME 
FROM STAFFS
WHERE DEPT_CODE = 'IT';

SELECT 1 AS ONE FROM STAFFS WHERE DEPT_CODE = 'IT';






-- AGGREGATION FUNCTIONS + GROUP BY
-- 1. EXCLUDE THE EMPLOYEE IN MARKETING (WHERE IS THE ACTION BEFORE GROUP BY)
-- 2. GROUP BY
-- 3. SELECT AGG FUNCTIONS
SELECT DEPT_CODE, AVG(SALARY) AS DEPT_AVERAGE_SALARY, COUNT(1) AS NUMBER_OF_DEPT_EMPLOYEES
, MAX(SALARY) DEPT_MAX_SALARY
FROM STAFFS
WHERE DEPT_CODE <> 'MK' -- EXCLUDE MARKETING
GROUP BY DEPT_CODE;

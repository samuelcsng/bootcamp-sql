USE sys;

CREATE DATABASE BOOTCAMP_2408;
USE BOOTCAMP_2408;

-- Comments in SQL (double-dash)
-- Database -> tables
	-- One database may have many tables
    -- One table (similar to excel worksheet) may have rows
    -- One row contains one or more columns
    
-- Database: column defintions: VATCHAR(Similar to Java String), INT/ INTEGER(Java: int)
-- DECIMAL(13,2) 11 digits for integer, 2 digits for decimal places
-- boolean (true/ false): database normally we use VARCHAR(1) -> Y/N
CREATE TABLE STAFFS (
	ID INTEGER, -- 1,2,3,4 ...
    STAFF_NAME VARCHAR(20),
    GENDER VARCHAR(1),
    SALARY DECIMAL(11,2),
    STAFF_EMAIL VARCHAR(50),
    DEPT_CODE VARCHAR(2) -- IT, HR, MK ...
);

-- DROP TABLE STAFFS;

SELECT * FROM STAFFS;

-- INSERT DATA
-- SYNTAX: INSERT INTO "TABLE_NAME" VALUES ...
-- Column name sequence has to be same as the value sequence 
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (1, 'JOHN WONG', 'M', 20000.5, 'johnwong@gmail.com', 'IT');

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (2, 'PETER LAU', 'M', 31000.0, 'peterwong@hotmail.com', 'HR');

-- remove data
-- DELETE FROM STAFFS; -- REMOVE ALL DATA

-- table may contain null value
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (3, 'JENNY LAU', 'F', 25000.0, 'MK');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE, STAFF_EMAIL) 
	VALUES (2, 'PETER LAU', 'M', 31000.0, 'HR', NULL);
    
-- SELECT BY CONDITION (WHERE)
SELECT * FROM STAFFS WHERE GENDER = 'M';
-- WHERE DEPT_CODE = 'IT'
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT';
-- AND, OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' OR DEPT_CODE = 'MK';
SELECT * FROM STAFFS WHERE DEPT_CODE IN ('IT', 'MK'); -- OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND DEPT_CODE = 'MK'; -- NO RESULT
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND GENDER = 'M';
-- SUPPORT BRACKETS
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' OR DEPT_CODE = 'MK' AND GENDER = 'F'; -- AND GO FIRST, THEN OR
SELECT * FROM STAFFS WHERE DEPT_CODE = 'IT' AND (SALARY > 19000 OR GENDER = 'F'); -- OR GO FIRST, THEN AND
-- SELECT SPECIFIC COLUMNS
-- SYNTAX: select "column_name1", "column_name2" ... from "table_name"
-- SELECT (WHAT YOU WANT TO SEE IN THE RESULT SET) -> COLUMNS
-- WHERE (HOW TO RETRIEVE THE DATA) -> ROWS
SELECT STAFF_NAME, DEPT_CODE FROM STAFFS WHERE GENDER = 'M';

-- CHANGE COLUMN NAME IN RESULT SET (NOT THE PHYSICAL TABLE)
SELECT STAFF_NAME AS NAME, DEPT_CODE AS DEPARTMENT_CODE FROM STAFFS WHERE GENDER = 'M';

-- ADD COLUMN IN PHYSICAL TABLE
ALTER TABLE STAFFS ADD EMPLOYMENT_DATE DATE;

-- AFTER ADDING COLUMN, THE COLUMN VALUES BECOME NULL FOR ALL ROWS
SELECT * FROM STAFFS;

-- UPDATE FIELD VALUES
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2014-08-01', '%Y-%m-%d') WHERE ID = 1;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2018-09-05', '%Y-%m-%d') WHERE ID = 2;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2019-03-31', '%Y-%m-%d') WHERE ID = 3;

-- CALCULATE PROBATION END DATE
-- DEFINE TABLE ALIAS
SELECT DATE_ADD(S.EMPLOYMENT_DATE, INTERVAL 3 MONTH) AS PROBATION_END_DATE
, S.STAFF_NAME
, S.ID
, S.EMPLOYMENT_DATE 
, S.EMPLOYMENT_DATE + 33 -- DATE -> INT + OPERATION (MYSQL NOT WORKING)
FROM STAFFS S;

-- MYSQL (NOT WORKING)
SELECT S.STAFF_NAME + '!!!!', CONCAT(S.STAFF_NAME, '!!!!')
FROM STAFFS S;

-- SELECT DETERMINE WHAT COLUMNS
SELECT S.STAFF_NAME + '!!!!'
, CONCAT(S.STAFF_NAME, '!!!!', '?????')
, CONCAT_WS(' ', S.STAFF_NAME, S.GENDER)
FROM STAFFS S
WHERE S.DEPT_CODE = 'IT'; -- DETERMINE THE NUMBER OF ROWS

-- MATH OPERATIONS (+, -, *, /, %)
-- 15 FIELDS (3 ROWS x 5 COLUMNS)
SELECT SALARY + 10000, SALARY, 12000 - 200 * 1.1, 1, 'HELLO'
FROM STAFFS;

SELECT 10 % 3, 'HELLO' FROM STAFFS WHERE DEPT_CODE IN ('MK', 'HR');

-- BETWEEN AND
SELECT *
FROM STAFFS
WHERE EMPLOYMENT_DATE BETWEEN STR_TO_DATE('2014-01-01', '%Y-%m-%d') AND STR_TO_DATE('2014-12-31', '%Y-%m-%d');

-- MODIFY PHYSICAL COLUMN DEFINTION
-- FROM VARCHAR(20) TO VARCHAR(30) -> EXTEND COLUMN LENGTH
ALTER TABLE STAFFS MODIFY STAFF_NAME VARCHAR(30);

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (4, 'VINCENT ABCDEFGHIJK ABCDEF', 'M', 15000.0, 'IT');
    
-- FROM VARCHAR(30) TO VARCHAR(20) -- NARROWING (DATA CHECKING)
-- IF EXISTING DATA LENGTH > NEW COLUMN LENGTH, DBMS WILL REJECT
ALTER TABLE STAFFS MODIFY STAFF_NAME VARCHAR(20);

UPDATE STAFFS SET STAFF_EMAIL = 'vincentlau@hotmail.com' WHERE ID = 4;

-- LIKE
-- "%" MEANS ANY CHARACTERS
SELECT *
FROM STAFFS
WHERE DEPT_CODE = 'IT'
AND STAFF_EMAIL LIKE '%@gmail.com';


INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (5, 'JOHN LAU', 'M', 20500.0, 'MK');

SELECT *
FROM STAFFS
WHERE STAFF_NAME LIKE 'JOHN%';

SELECT *
FROM STAFFS
WHERE STAFF_EMAIL LIKE '%@%' OR STAFF_EMAIL IS NULL;

-- AGGREGATION FUNCTIONS + WHERE
SELECT SUM(SALARY)
FROM STAFFS;

SELECT SUM(SALARY)
FROM STAFFS
WHERE DEPT_CODE = 'IT';

-- SUM() -> SUM UP ALL THE VALUE OF A COLUMN
-- COUNT() -> COUNT THE NUMBER OF ROWS
-- YOU CANNOT PUT STAFF_NAME HERE, YOU SHOULD KNOW THE REASON
-- AS LONG AS YOU HAVE ONE AGGREGATION FUNCTION, THE RESULT MUST BE SINGLE ROW
SELECT SUM(SALARY), COUNT(1), COUNT(*), COUNT(ID), MIN(SALARY), MAX(SALARY), MAX(ID), AVG(SALARY) -- , STAFF_NAME 
FROM STAFFS
WHERE DEPT_CODE = 'IT';

SELECT 1 AS ONE FROM STAFFS WHERE DEPT_CODE = 'IT';

-- AGGREGATION FUNCTIONS + GROUP BY
-- 1. EXCLUDE THE EMPLOYEE IN MARKETING (WHERE IS THE ACTION BEFORE GROUP BY)
-- 2. GROUP BY
-- 3. SELECT AGG FUNCTIONS
SELECT DEPT_CODE, AVG(SALARY) AS DEPT_AVERAGE_SALARY, COUNT(1) AS NUMBER_OF_DEPT_EMPLOYEES
, MAX(SALARY) DEPT_MAX_SALARY
FROM STAFFS
WHERE DEPT_CODE <> 'MK' -- EXCLUDE MARKETING
GROUP BY DEPT_CODE;

-- ORDER BY (BY DEFAULE ASC)
SELECT * FROM STAFFS
ORDER BY STAFF_NAME ASC;

-- NULL VALUES COME FIRST
SELECT * FROM STAFFS
ORDER BY STAFF_EMAIL;

-- ORDER BY MULTIPLE COLUMNS
SELECT * FROM STAFFS
ORDER BY GENDER DESC, STAFF_NAME DESC;

SELECT * FROM STAFFS
ORDER BY EMPLOYMENT_DATE DESC;

-- GROUP BY + HAVING(AGG FUNCTION)
SELECT GENDER, SUM(SALARY) AS SUM_OF_SALARY
FROM STAFFS
WHERE STAFF_NAME LIKE '%LAU' -- FILTER DATA (BEFORE GROUP BY)
GROUP BY GENDER
HAVING COUNT(1) > 1; -- FILTER GROUP (AFTER GROUP BY)

-- RESULT
-- m 51500.00

-- EXPLAINATION OF THE ABOVE;
-- STEP 1: FILTER DATA (BEFORE GROUP)
SELECT *
FROM STAFFS
WHERE STAFF_NAME LIKE '%LAU';

-- STEP 2:
SELECT *
FROM STAFFS
WHERE STAFF_NAME LIKE '%LAU'
GROUP BY GENDER;

-- STEP 3: YOU CAN USE HAVING TO DETERMINE WHICH GROUP SHOULD EXIST
SELECT GENDER, SUM(SALARY) AS SUM_OF_SALARY
FROM STAFFS
WHERE STAFF_NAME LIKE '%LAU'
GROUP BY GENDER
HAVING COUNT('HELLO') > 1;

-- EXAMPLE 2: GROUP BY + HAVING
SELECT DEPT_CODE, SUM(SALARY) AS SUM_OF_SALARY, MIN(SALARY), AVG(SALARY) -- STAFF_NAME
FROM STAFFS
GROUP BY DEPT_CODE
HAVING MIN(SALARY) < 21000; -- FILTER OUT DEPT_CODE 'HR', BECAUSE MIN SLARY OF HR DEPARTMENT >=21000

-- CASE WHEN THEN (JAVA: IF ELSE IF
SELECT CASE
		WHEN DEPT_CODE = 'IT' THEN 'INFORMATION TECHNOLOGY'
		WHEN DEPT_CODE = 'HR' THEN ' HUMAN RESOURCE'
		WHEN DEPT_CODE = 'MK' THEN 'MARKETING'
        ELSE 'N/A'
    END AS 'DEPT_DESCRIPTION'
,   CASE
		WHEN SALARY > 30000 THEN 'H'
        WHEN SALARY > 20000 THEN 'M'
        ELSE 'S'
	END AS 'SALARY_GROUP'
,STAFF_NAME, SALARY
FROM STAFFS;

-- DISTINCT (SHOW ALL POSSIBLE VALUES)
-- "DISTINCT GENDER, DEPT_CODE" -> DISTINCT 2 COLUMNS
-- YOU SHOULD NOT USE AGG FUNCTION WITH DISTINCT
SELECT DISTINCT GENDER,  DEPT_CODE
FROM STAFFS;

-- GROUP BY 2 COLUMNS
SELECT GENDER, DEPT_CODE, SUM(SALARY), MAX(SALARY)
FROM STAFFS
GROUP BY GENDER, DEPT_CODE; -- ONE GROUP DEFINITION

-- DROP TABLE ORDERS;
-- create table ORDERS with datetime
CREATE TABLE ORDERS (
	ID INTEGER,
    ORDER_DATETIME DATETIME,
    COUPON_CODE VARCHAR(10),
    ORDER_STATUS VARCHAR(1)
);

INSERT INTO ORDERS VALUES ( 1, STR_TO_DATE('2023-01-01 00:00:00', '%Y-%m-%d %t'), NULL, 'P');
INSERT INTO ORDERS VALUES ( 2, '2024-12-31 18:05:23', NULL, 'P');

-- LIMIT
SELECT *
FROM STAFFS
ORDER BY STAFF_NAME DESC
LIMIT 2;

-- JOIN
CREATE TABLE NUMBERS (
	NUMBER1 INTEGER,
	NUMBER2 INTEGER
);
-- 3 X 2
INSERT INTO NUMBERS VALUES (1, 10);
INSERT INTO NUMBERS VALUES (2, 105);
INSERT INTO NUMBERS VALUES (3, 299);

CREATE TABLE NAMES(
	NAME1 VARCHAR(10),
    NAME2 VARCHAR(10),
    NUM INTEGER
);
-- 3 X 3
INSERT INTO NAMES VALUES ('JOHN', 'PETER', 2);
INSERT INTO NAMES VALUES ('JENNY', 'SALLY', 1);
INSERT INTO NAMES VALUES ('STEVEN', 'OSCAR', 4);

-- INNER JOIN (WITHOUT CONDITION)
-- Usage: Find out all combinations
-- 9 X 5 ( 9 = 3 X 3, 5 columns)
SELECT R.*, N.*
FROM NUMBERS R INNER JOIN NAMES N;

-- SELF INNER JOIN
SELECT R.*, N.*
FROM NUMBERS R INNER JOIN NAMES N ON R.NUMBER1 = N.NUM;

-- INNER JOIN: DEPARTMENT + STAFFS
-- ONE TO MANY: ONE STAFF BELONGS TO ONE DEPT, BUT ONE DEPT MAY HAVE MORE THAN ONE STAFF
CREATE TABLE DEPARTMENTS (
	ID INTEGER,
	DEPT_CODE VARCHAR(2),
	DEPT_DESC VARCHAR(100)
);
INSERT INTO DEPARTMENTS VALUES (1, 'IT' 'INFORMATION TECHNOLOGY');
INSERT INTO DEPARTMENTS VALUES (2, 'HR' 'HUMAN RESOURCES');
INSERT INTO DEPARTMENTS VALUES (3, 'MK' 'MARKETING');

-- INNER JOIN + ORDER_BY
SELECT D.DEPT_DESC, S.STAFF_NAME, S.SALARY
FROM DEPARTMENTS D INNER JOIN STAFFS S ON D.DEPT_CODE = S.DEPT_CODE
ORDER BY S.DEPT_CODE, S.SALARY DESC;

-- INNER JOIN + GROUP BY
SELECT D.DEPT_DESC, SUM(S.SALARY) AS DEPT_TOTAL_SALARY
FROM DEPARTMENTS D INNER JOIN STAFFS S ON D.DEPT_CODE = S.DEPT_CODE
GROUP BY D.DEPT_CODE
ORDER BY DEPT_TOTAL_SALARY DESC; --- last step of SQL

-- LEFT JOIN (WITHOUT GROUP)
INSERT INTO DEPARTMENTS VALUES (4, 'CS', 'CUSTOMER SERVICE');
-- CS DEPARTMENT HAS NO STAFF
SELECT D.DEPT_CODE, COUNT(S.ID) DEPT_STAFF_NUMBER
FROM DEPARTMENTS D LEFT JOIN STAFFS ON D.DEPT_CODE = S.DEPT_CODE
GROUP BY D.DEPT_CODE;

-- RIGHT JOIN (same result as the above)
SELECT D.DEPT_CODE, COUNT(S.ID) DEPT_STAFF_NUMBER
FROM STAFFS S RIGHT JOIN DEPARTMENTS D ON D.DEPT_CODE = S.DEPT_CODE
GROUP BY D.DEPT_CODE;

-- LEFT JOIN (WITHOUT INTERSECT)
SELECT D.DEPT_CODE, COUNT(S.ID) DEPT_STAFF_NUMBER
FROM DEPARTMENTS D LEFT JOIN STAFFS ON D.DEPT_CODE = S.DEPT_CODE
WHERE S.ID IS NULL
GROUP BY D.DEPT_CODE;

-- EXISTS/ NOT EXISTS (YOU HAVE TO USE A KEY TO MAP)
-- FIND THE DEPARTMENT WHICH HAS NO STAFF
-- DISADVANTAGE: YOU CANNOT SELECT COLUMN IN TABLE STAFF
SELECT D.* 
FROM DEPARTMENTS D
WHERE NOT EXISTS (SELECT 1 FROM STAFFS S WHERE D.DEPT_CODE = S.DEPT_CODE);

SELECT D.* 
FROM DEPARTMENTS D
WHERE EXISTS (SELECT 1 FROM STAFFS S WHERE D.DEPT_CODE = S.DEPT_CODE);

-- create new database
CREATE DATABASE BOOTCAMP_EXERCISE1;
-- get into database
USE BOOTCAMP_EXERCISE1;

-- 1. Create all tables mentioned in ER Diagram
	-- a. With the provided structures in ER Diagram
	-- b. With primary key/ foreign key described in ER Diagram
	-- c. Ignore the table 'job_grades' here. 

-- CREATE TABLES
-- REGIONS
CREATE TABLE REGIONS (
	REGION_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    REGION_NAME VARCHAR(25) 
);
 -- COUNTRIES
CREATE TABLE COUNTRIES (
	COUNTRY_ID CHAR(2) PRIMARY KEY, -- PRIMARY KEY
    COUNTRY_NAME VARCHAR(40),
    REGION_ID INTEGER, -- FOREIGN KEY REGIONS.REGION_ID
    FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
);
-- LOCATIONS
CREATE TABLE LOCATIONS (
	LOCATION_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    STREET_ADDRESS VARCHAR(25),
    POSTAL_CODE VARCHAR(12),
    CITY VARCHAR(30),
    STATE_PROVINCE VARCHAR(12),
    COUNTRY_ID CHAR(2), -- FOREIGN KEY COUNTRIES.COUNTRY_ID
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID)
);
-- DEPARTMENTS
CREATE TABLE DEPARTMENTS (
	DEPARTMENT_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    DEPARTMENT_NAME VARCHAR(30),
    MANAGER_ID INTEGER,
    LOCATION_ID INTEGER, -- FOREIGN KEY LOCATIONS.LOCATION_ID
    FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID)
);
-- JOBS
CREATE TABLE JOBS (
	JOB_ID VARCHAR(10) PRIMARY KEY, -- PRIMARY KEY
    JOB_TITLE VARCHAR(35),
    MIN_SALARY DECIMAL(7,2),
    MAX_SALARY DECIMAL(7,2)
);
-- EMPLOYEES
CREATE TABLE EMPLOYEES (
	EMPLOYEE_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    FIRST_NAME VARCHAR(20),
    LAST_NAME VARCHAR(25),
    EMAIL VARCHAR(25),
    PHONE_NUMBER VARCHAR(25),
    HIRE_DATE DATE,
    JOB_ID VARCHAR(10), -- FOREIGN KEY JOBS.JOB_ID
    SALARY DECIMAL(7, 2),
    COMMISSION_PCT DECIMAL(3, 2),
    MANAGER_ID INTEGER,
    DEPARTMENT_ID INTEGER, -- FOREIGN KEY DEPARTMENTS.DEPARTMENT_ID
    FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);
-- JOB_HISTORY
CREATE TABLE JOB_HISTORY (
	EMPLOYEE_ID INTEGER, -- FOREIGN KEY EMPLOYEES.EMPLOYEE_ID
    START_DATE DATE,
    END_DATE DATE,
	JOB_ID VARCHAR(10), -- FOREIGN KEY JOBS.JOB_ID
    DEPARTMENT_ID INTEGER, -- FOREIGN KEY DEPARTMENTS.DEPARTMENT_ID
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);

-- DROP TABLE REGIONS;
-- DROP TABLE COUNTRIES;
-- DROP TABLE LOCATIONS;
-- DROP TABLE DEPARTMENTS;
-- DROP TABLE JOBS;
-- DROP TABLE EMPLOYEES;
-- DROP TABLE JOB_HISTORY;


-- 2. Insert some data, you can add your own data. 

-- INSERT DATA

-- INSERT REGIONS
INSERT INTO REGIONS VALUES (1, 'EUROPE');
INSERT INTO REGIONS VALUES (2, 'NORTH AMERICA');
INSERT INTO REGIONS VALUES (3, 'ASIA');
-- SELECT * FROM REGIONS;

-- INSERT COUNTRIES
INSERT INTO COUNTRIES VALUES ("DE", 'Germany', 1);
INSERT INTO COUNTRIES VALUES ("IT", 'Italy', 1);
INSERT INTO COUNTRIES VALUES ("JP", 'Japan', 3);
INSERT INTO COUNTRIES VALUES ("US", 'United State', 2);
-- SELECT * FROM COUNTRIES;

-- INSERT LOCATIONS
INSERT INTO LOCATIONS VALUES (1000, '1297 Via Cola di Rie', '989', 'Roma', '', 'IT' );
INSERT INTO LOCATIONS VALUES (1100, '93091 Calle della Te ', '10934', 'Venice', '', 'IT' );
INSERT INTO LOCATIONS VALUES (1200, '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo JP', NULL );
INSERT INTO LOCATIONS VALUES (1400, '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US' );
-- SELECT * FROM LOCATIONS;

-- INSERT DEPARTMENTS
INSERT INTO DEPARTMENTS VALUES (10, 'Administration', 200, 1100);
INSERT INTO DEPARTMENTS VALUES (20, 'Marketing', 201, 1200);
INSERT INTO DEPARTMENTS VALUES (30, 'PurchasinG', 202, 1400);
-- SELECT * FROM DEPARTMENTS;

-- INSERT JOBS
INSERT INTO JOBS VALUES ('ST_CLERK', 'Staff Clerk', 0.00, 99999.99);
INSERT INTO JOBS VALUES ('MK_REP', 'Marketing Rep.', 0.00, 99999.99);
INSERT INTO JOBS VALUES ('IT_PROG', 'IT Programming', 0.00, 99999.99);
-- SELECT * FROM JOBS;

-- INSERT EMPLOYEES
INSERT INTO EMPLOYEES VALUES (100, 'Steven', 'King', 'SKING', '515-1234567', str_to_date('1987-06-17','%Y-%m-%d'), 'ST_CLERK', 24000.00, 0.00, 109, 10);
INSERT INTO EMPLOYEES VALUES (101, 'Neena', 'Kochhar', 'NKOCHHAR', '515-1234568', str_to_date('1987-06-18','%Y-%m-%d'), 'MK_REP', 17000.00, 0.00, 103, 20);
INSERT INTO EMPLOYEES VALUES (102, 'Lex', 'De Haan', 'LDEHAAN', '515-1234569', str_to_date('1987-06-19','%Y-%m-%d'), 'IT_PROG', 17000.00, 0.00, 108, 30);
INSERT INTO EMPLOYEES VALUES (103, 'Alexander', 'Hunold', 'AHUNOLD', '590-4234567', str_to_date('1987-06-20','%Y-%m-%d'), 'MK_REP', 9000.00, 0.00, 105, 20);
-- SELECT * FROM EMPLOYEES;

-- INSERT JOB_HISTORY
INSERT INTO JOB_HISTORY VALUES (102, str_to_date('1993-01-13', '%Y-%m-%d'), str_to_date('1998-07-24', '%Y-%m-%d'), 'IT_PROG', 20);
INSERT INTO JOB_HISTORY VALUES (101, str_to_date('1989-09-21', '%Y-%m-%d'), str_to_date('1993-10-27', '%Y-%m-%d'), 'MK_REP', 10);
INSERT INTO JOB_HISTORY VALUES (101, str_to_date('1993-10-28', '%Y-%m-%d'), str_to_date('1997-03-15', '%Y-%m-%d'), 'MK_REP', 30);
INSERT INTO JOB_HISTORY VALUES (100, str_to_date('1996-02-17', '%Y-%m-%d'), str_to_date('1999-12-19', '%Y-%m-%d'), 'ST_CLERK', 30);
INSERT INTO JOB_HISTORY VALUES (103, str_to_date('1998-03-24', '%Y-%m-%d'), str_to_date('1999-12-31', '%Y-%m-%d'), 'MK_REP', 20);
-- SELECT * FROM JOB_HISTORY;

SELECT * FROM REGIONS;
SELECT * FROM COUNTRIES;
SELECT * FROM LOCATIONS;
SELECT * FROM DEPARTMENTS;
SELECT * FROM JOBS;
SELECT * FROM EMPLOYEES;
SELECT * FROM JOB_HISTORY;

-- 3. Write a query to find the location_id, street_address, city, state_province, country_name of locations 
select
	L.LOCATION_ID,
    L.STREET_ADDRESS,
    L.CITY,
    L.STATE_PROVINCE,
    C.COUNTRY_NAME
FROM LOCATIONS L LEFT JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
;

-- 4. Write a query to find the first_name, last name, department ID of all the employees.
SELECT
	FIRST_NAME,
    LAST_NAME,
    DEPARTMENT_ID
FROM EMPLOYEES
;

-- 5. Write a query to find the first_name, last_name, job_id, department ID of the employees who works in Japan. 

-- FIRST CORRECT THE TABLE WITH ISSUE !!!
UPDATE LOCATIONS
SET COUNTRY_ID = 'JP'
WHERE LOCATION_ID = 1200
;
SELECT * FROM LOCATIONS;

-- SOLUTION 1: EMPLOYEES.DEPARTMENT_ID <L> DEPARTMENTS.LOCATION_ID <L> LOCATIONS.COUNTRY_ID <L> COUNTRIES(COUNTRY_NAME = Japan)
SELECT
	E.FIRST_NAME,
    E.LAST_NAME,
    E.JOB_ID,
    E.DEPARTMENT_ID
FROM 
	EMPLOYEES E
LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
LEFT JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
-- WHERE L.LOCATION_ID = 1200
WHERE C.COUNTRY_NAME = 'Japan'
;

-- SOLUTION 2: COUNTRIES(COUNTRY_NAME = Japan) <I> LOCATIONS.COUNTRY_ID <I> DEPARTMENTS.LOCATION_ID <I> EMPLOYEES.DEPARTMENT_ID 
WITH 
TARGET AS (
	SELECT
		* 
	FROM COUNTRIES C
	WHERE COUNTRY_NAME = 'Japan'
)
SELECT
	E.FIRST_NAME,
    E.LAST_NAME,
    E.JOB_ID,
    E.DEPARTMENT_ID 
FROM TARGET T
JOIN LOCATIONS L ON T.COUNTRY_ID = L.COUNTRY_ID
JOIN DEPARTMENTS D ON L.LOCATION_ID = D.LOCATION_ID
JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
;

-- 6. write a query to find the employee id, last_name along with their manager_id and last_name.
SELECT
	EMPLOYEE_ID,
    -- MANAGER_ID,
    concat_ws(' ', LAST_NAME, MANAGER_ID) AS LAST_NAME_MANAGER_ID,
    LAST_NAME
FROM EMPLOYEES
;

-- 7. Write a query to find the first_name, last_name and hire date of the employees who was hired after employee 'Lex De Haan'.
WITH
CTE1 AS (
	SELECT
		concat_ws(' ', FIRST_NAME, LAST_NAME) AS FULL_NAME,
        HIRE_DATE
	FROM EMPLOYEES
),
TARGET_HIRE_DATE AS (
	SELECT
		HIRE_DATE
	FROM CTE1
    WHERE FULL_NAME = 'Lex De Haan'
)
-- SELECT * FROM TARGET_HIRE_DATE;
SELECT
	FIRST_NAME,
    LAST_NAME,
    HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE > (SELECT HIRE_DATE FROM TARGET_HIRE_DATE)
;

-- 8. Write a query to get the department name and number of employees of each the department.
SELECT
	D.DEPARTMENT_NAME,
    COUNT(E.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES
FROM
DEPARTMENTS D
JOIN EMPLOYEES E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_ID
;

-- 9. Write a query to find the employee ID, job title, number of days between ending date and starting date for all jobs in department ID 30. 
WITH
TARGET AS (
SELECT
	EMPLOYEE_ID,
    JOB_ID,
    datediff(END_DATE, START_DATE) AS DAY_DIFFERENCE
FROM JOB_HISTORY J
WHERE DEPARTMENT_ID = 30
),
JOIN_JOB_HISTORY_JOBS AS (
SELECT
	T.EMPLOYEE_ID,
    J.JOB_TITLE,
    T.DAY_DIFFERENCE
FROM TARGET T
LEFT JOIN JOBS J ON T.JOB_ID = J.JOB_ID 
)
SELECT * FROM JOIN_JOB_HISTORY_JOBS;

-- 10. Write a query to display all department name, manager name, city and country name.
	-- DEPARTMENTS <L> LOCATIONS.LOCATION_ID <L> COUNTRIES.COUNTRY_ID
SELECT
	D.DEPARTMENT_NAME,
    D.MANAGER_ID,
    L.CITY,
    C.COUNTRY_NAME
FROM DEPARTMENTS D
LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
LEFT JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID;

-- 11. Write a query to display the average salary of each department. 
	-- DEPARTMENTS <J> EMPLOYEES.DEPARTMENT_ID
SELECT
	D.DEPARTMENT_NAME,
	avg(E.SALARY) AS AVG_SALARY
FROM DEPARTMENTS D
JOIN EMPLOYEES E ON D. DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_ID;

-- 12. Now, we try to perform normalization on table 'jobs'.
	-- a. How do you re-design the table 'jobs'? and adding table 'job_grades'?
CREATE TABLE IF NOT EXISTS JOB_GRADES (
	GRADE_LEVEL VARCHAR(2),
    LOWEST_SAL DECIMAL(7,2),
    HIGHEST_SAL DECIMAL(7,2),
    PRIMARY KEY (GRADE_LEVEL)
);
-- DROP TABLE IF EXISTS JOB_GRADES;
INSERT INTO JOB_GRADES VALUES ('AA', 50000.00, 99999.99);
INSERT INTO JOB_GRADES VALUES ('BB', 20000.00, 49999.99);
INSERT INTO JOB_GRADES VALUES ('CC', 10000.00, 19999.99);
INSERT INTO JOB_GRADES VALUES ('DD',  5000.00,  9999.99);
SELECT * FROM JOB_GRADES;

ALTER TABLE JOBS
-- DROP COLUMN MIN_SALARY,
-- DROP COLUMN MAX_SALARY,
ADD COLUMN GRADE_LEVEL VARCHAR(2),
ADD CONSTRAINT FK_JOB_GRADE
FOREIGN KEY (GRADE_LEVEL) REFERENCES JOB_GRADES(GRADE_LEVEL)
;
SELECT * FROM JOBS;
UPDATE JOBS
	SET GRADE_LEVEL = 'BB'
WHERE JOB_ID = 'ST_CLERK'
;
UPDATE JOBS
	SET GRADE_LEVEL = 'CC'
WHERE JOB_ID = 'MK_REP'
;
UPDATE JOBS
	SET GRADE_LEVEL = 'CC'
WHERE JOB_ID = 'IT_PROG'
;
SELECT * FROM JOBS;
-- SELECT * FROM JOBS J1 JOIN JOB_GRADES J2 ON J1.GRADE_LEVEL = J2.GRADE_LEVEL; 





